{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","api/index.js","Components/CountryPicker/CountryPicker.js","Components/Charts/Charts.js","App.js","index.js","App.module.css","Components/CountryPicker/CountryPicker.module.css","Components/Charts/Charts.module.css","images/image.png"],"names":["module","exports","Cards","data","this","props","confirmed","Grid","container","spacing","justify","alignItems","item","component","Card","xs","md","elevation","className","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","React","Component","url","fetchData","country","a","changableurl","axios","get","fetchDailyData","modifiedData","map","total","date","reportDate","fetchCountries","countries","countryNames","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","fetchAPI","useEffect","FormControl","formControl","NativeSelect","onChange","e","target","index","key","Charts","dailyData","setDailyData","fetchdata","newdata","filtereddata","filter","i","length","lineChart","labels","datasets","label","fill","borderColor","barChart","backgroundColor","options","legend","display","position","title","text","App","fetch","setState","state","fetchedData","AppContainer","src","covid19","alt","image","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0ae9b48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cards_card__1z9Jx\",\"infected\":\"Cards_infected__1fgzH\",\"recovered\":\"Cards_recovered__27XG1\",\"deaths\":\"Cards_deaths__3FaCv\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nclass Cards extends React.Component {\r\n  render() {\r\n    const { data } = this.props;\r\n    //Necessary to handle this using if else otherwise will get undefind error\r\n    if (!data.confirmed) {\r\n      return <h1>Loading Data, Please Wait...........</h1>;\r\n    } else {\r\n      return (\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item component={Card} xs={12} md={3} elevation={4} className={cx(styles.card, styles.infected)}>\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" gutterBottom>\r\n                Confirmed\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={data.confirmed.value} duration={1.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n              <Typography variant=\"body2\">No of confirmed COVID19 cases</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item component={Card} xs={12} md={3} elevation={4} className={cx(styles.card, styles.recovered)}>\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={data.recovered.value} duration={1.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n              <Typography variant=\"body2\">No of recoveries from COVID19</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item component={Card} xs={12} md={3} elevation={4} className={cx(styles.card, styles.deaths)}>\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={data.deaths.value} duration={1.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\r\n              <Typography variant=\"body2\">No of deaths from COVID 19</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changableurl = url;\r\n    if(country){\r\n        changableurl = `${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changableurl);\r\n        return {confirmed,recovered,deaths,lastUpdate};\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((item) => ({\r\n            confirmed: item.confirmed.total,\r\n            deaths: item.deaths.total,\r\n            date: item.reportDate\r\n        }));\r\n        //console.log(modifiedData)\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n export const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        const countryNames = countries.map((item) => item.name);\r\n        //console.log(countryNames);\r\n        return countryNames;\r\n    }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n           \r\n            \r\n    \r\n","import React,{useState, useEffect} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\n    const fetchAPI = async () => {\r\n\r\n        setFetchedCountries(await fetchCountries());\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchAPI();\r\n        \r\n\r\n    },[]);\r\n\r\n    //console.log(fetchedCountries);\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                    fetchedCountries.map((item,index) => {\r\n                        return (\r\n                            <option key={index} value={item}>{item}</option>\r\n\r\n                        );\r\n                    })\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n        \r\n        );\r\n\r\n}\r\n\r\nexport default CountryPicker;","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Charts.module.css'\r\n\r\n\r\n\r\n\r\nconst Charts = ({data,country}) => {\r\n\r\nconst [dailyData, setDailyData] = useState([]);\r\n\r\nconst fetchdata = async () => {\r\n      \r\n      \r\n    const newdata = await fetchDailyData();\r\n    //console.log(newdata);\r\n    setDailyData(newdata);\r\n    \r\n}\r\n\r\nuseEffect(() => {\r\n    \r\n    fetchdata();\r\n    \r\n    \r\n},[]);\r\n//console.log(dailyData)\r\n\r\nconst filtereddata = dailyData.filter((item,i) => (i>=(dailyData.length-30) && i<(dailyData.length)));\r\n\r\nconst lineChart = (\r\n\r\n    dailyData.length?<Line data={{\r\n    \r\n\r\n        labels : filtereddata.map(({date}) => date),\r\n        datasets : [\r\n            {\r\n                label:'Infected',\r\n                data : filtereddata.map(({confirmed}) => confirmed),\r\n                fill : true,\r\n                borderColor: '#1976D2',\r\n                \r\n                  \r\n            },\r\n            {\r\n                label:'Deaths',\r\n                data : filtereddata.map(({deaths}) => deaths),\r\n                fill:true,\r\n                borderColor: '#F44336',  \r\n            }\r\n        ]\r\n    }} \r\n    \r\n    \r\n\r\n    />:null);\r\n\r\n    const barChart = (\r\n\r\n        (data.confirmed)?(<Bar data={{\r\n        labels:['Infected','Recovered','Deaths'],\r\n        datasets:[\r\n            {\r\n                label:'People',\r\n                data:[data.confirmed.value,data.recovered.value,data.deaths.value],\r\n                backgroundColor:['rgba(0, 4, 255, 0.6)','rgba(0, 255, 55, 0.6)','rgba(255, 0, 0, 0.6)'],\r\n                borderColor:['blue','green','red']\r\n            }\r\n        ]\r\n    }} \r\n    \r\n    options={{\r\n        legend:{display:false,position:\"right\"},\r\n        title:{text:`Current Scenario in ${country}`,display:true}\r\n    }}\r\n    \r\n    \r\n    />):null);\r\n    \r\n    \r\n\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n           {(country)?barChart:lineChart}\r\n        </div>\r\n        );\r\n\r\n\r\n}\r\n\r\nexport default Charts;","import React from 'react';\r\nimport Cards from './Components/Cards/Cards.js';\r\nimport CountryPicker from './Components/CountryPicker/CountryPicker.js';\r\nimport Charts from './Components/Charts/Charts.js';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api/index.js';\r\nimport covid19 from './images/image.png';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      data : {},\r\n      country:''\r\n    };\r\n }\r\n    \r\n  \r\n  async componentDidMount(){\r\n    //fetching card data from api\r\n    const fetchedData = await fetchData();\r\n    this.setState({data : fetchedData});\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    \r\n    const fetch = await fetchData(country);\r\n    this.setState({data: fetch,country : country});\r\n    //console.log(fetch);\r\n  }\r\n\r\n  \r\n  render() {\r\n    const {data,country} = this.state;\r\n    return (\r\n      <div className={styles.AppContainer}>\r\n        <img src={covid19} alt=\"\" className={styles.image} />\r\n        <Cards data={data}/>\r\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n        <Charts data={data} country={country}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nReactDOM.render( <App />,document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"App_AppContainer__obMMz\",\"image\":\"App_image__1nXT2\",\"container\":\"App_container__1ca0f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__39SaA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__22rYR\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}